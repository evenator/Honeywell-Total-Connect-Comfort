#! /usr/bin/env python

import argparse
from honeywell_total_connect_comfort.client import Client
from honeywell_total_connect_comfort.database import Database
import sys

# This verb pattern CLI based on an example by Chase Seibert:
# https://chase-seibert.github.io/blog/2014/03/21/python-multilevel-argparse.html


class Cli(object):
    def __init__(self, argv):
        parser = argparse.ArgumentParser()
        parser.add_argument('command', metavar='COMMAND', type=str)
        args = parser.parse_args(argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)(argv[2:])

    def print_locations(self, argv):
        parser = argparse.ArgumentParser(description='Get list of locations')
        parser.add_argument('username', metavar='USER', type=str)
        parser.add_argument('password', metavar='PASSWORD', type=str)
        args = parser.parse_args(argv)
        client = Client(args.username, args.password)
        print(client.get_locations())

    def print_device(self, argv):
        parser = argparse.ArgumentParser(description='Get list of locations')
        parser.add_argument('username', metavar='USER', type=str)
        parser.add_argument('password', metavar='PASSWORD', type=str)
        parser.add_argument('device_id', metavar='DEVICE_ID', type=str)
        args = parser.parse_args(argv)
        client = Client(args.username, args.password)
        print(str(client.get_device_data(args.device_id)))

    def store_device_data(self, argv):
        parser = argparse.ArgumentParser(description='Save data to database')
        parser.add_argument('db_file', metavar='DB_FILE', type=str)
        parser.add_argument('username', metavar='USER', type=str)
        parser.add_argument('password', metavar='PASSWORD', type=str)
        parser.add_argument('device_id', metavar='DEVICE_ID', type=str)
        args = parser.parse_args(argv)
        db = Database(args.db_file)
        client = Client(args.username, args.password)
        device_data = client.get_device_data(args.device_id)
        db.add_device_data(device_data)


if __name__ == '__main__':
    Cli(sys.argv)
